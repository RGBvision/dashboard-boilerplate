<?php

/**
 * This file is part of the RGB.dashboard package.
 *
 * (c) Alexey Graham <contact@rgbvision.net>
 *
 * @package    RGB.dashboard
 * @author     Alexey Graham <contact@rgbvision.net>
 * @copyright  2017-2019 RGBvision
 * @license    https://dashboard.rgbvision.net/license.txt MIT License
 * @version    1.7
 * @link       https://dashboard.rgbvision.net
 * @since      Class available since Release 1.0
 */

class DB
{
    //--- Instance
    static private $instance = null;
    //--- DB host
    static protected $db_host;
    //--- DB user
    static protected $db_user;
    //--- DB password
    static protected $db_pass;
    //--- DB port
    static protected $db_port;
    //--- DB socket
    static protected $db_socket;
    //--- DB name
    static protected $db_name;
    //--- DB prefix
    static public $db_pref;
    //--- This connect
    static public $connect;
    //--- List all queries
    static public $_query_list = array();
    //--- Last query
    static public $_last_query = '';

    //--- Constructor
    private function __construct(array $config)
    {
        self::$db_host = $config['dbhost'];
        self::$db_user = $config['dbuser'];
        self::$db_pass = $config['dbpass'];
        self::$db_name = $config['dbname'];
        self::$db_pref = $config['dbpref'];

        if (!isset($config['dbport'])) {
            self::$db_port = ini_get('mysqli.default_port');
        } else {
            self::$db_port = ($config['dbport'] ?? null);
        }

        if (!isset($config['dbsock'])) {
            self::$db_socket = ini_get('mysqli.default_socket');
        } else {
            self::$db_port = ($config['dbsock'] ?? null);
        }

        if (!is_object(self::$connect) || !self::$connect instanceof mysqli) {
            self::$connect = @new mysqli(self::$db_host, self::$db_user, self::$db_pass, null, self::$db_port, self::$db_socket);
            if (self::$connect->connect_error) {
                self::shutDown(__METHOD__ . ': ' . self::$connect->connect_error);
            }
        }

        if (defined('SQL_PROFILING') && SQL_PROFILING && mysqli_query(self::$connect, "SET PROFILING_HISTORY_SIZE = 500")) {
            mysqli_query(self::$connect, "SET PROFILING = 1");
        }
    }

    //--- Make instance
    public static function getInstance(array $config): ?DB
    {
        if (self::$instance === null) {
            self::$instance = new self($config);
        }
        return self::$instance;
    }

    //--- Initialization
    public static function init(array $config): void
    {
        self::getInstance($config);
        self::setDatabaseName();
        self::setCharset('utf8');
    }

    //--- Set default charset
    public static function setCharset(string $charset): void
    {
        if (!self::$connect->set_charset($charset)) {
            self::shutDown(__METHOD__ . ': ' . self::$connect->error);
        }
    }

    //--- DB name setter
    public static function setDatabaseName(): void
    {
        if (!self::$connect->select_db(self::$db_name)) {
            self::shutDown(__METHOD__ . ': ' . self::$connect->error);
        }

        if (!defined('PREFIX')) {
            define('PREFIX', self::$db_pref);
        }
    }

    //--- Returns the number of rows affected by last query.
    public static function getAffectedRows(): int
    {
        return self::$connect->affected_rows;
    }

    //--- Returns the last executed MySQL query.
    public static function getLastQuery(): string
    {
        return self::$_last_query;
    }

    //--- Returns an array with all executed SQL queries within the current object.
    public static function getQueries(): array
    {
        return array_map('self::queryList', self::$_query_list);
    }

    //--- Format queries ToDo: make beautifier
    public static function queryList($string): string
    {
        $search = array(
            "/[\t]/",
            '/(\s)+/s',
            '/(FROM |WHERE |LEFT JOIN|INNER JOIN|RIGHT JOIN|JOIN|ON |AND )/s'

        );

        $replace = array(
            ' ',
            '\\1',
            "\r\n$1"
        );

        return trim(preg_replace($search, $replace, $string));
    }

    //--- Returns ID generated by the previous INSERT operation.
    public static function getInsertId(): int
    {
        return (int)self::$connect->insert_id;
    }

    //--- Returns ID generated by the previous INSERT operation.
    public static function insertId(): int
    {
        return (int)mysqli_insert_id(self::$connect);
    }

    //--- Get the function which generate request error
    public static function getCaller()
    {
        if (!function_exists('debug_backtrace')) {
            return '';
        }

        $stack = debug_backtrace();
        $stack = array_reverse($stack);

        $caller = array();

        foreach ($stack as $call) {
            $function = $call['function'];
            if (isset($call['class'])) {
                $function = $call['class'] . "->$function";
            }
            $caller[] = (array(
                'call_file' => ($call['file'] ?? 'Unknown'),
                'call_func' => $function,
                'call_line' => ($call['line'] ?? 'Unknown')
            ));
        }

        return $caller;
    }

    //--- Get tables list
    public function getTables($condition = null): array
    {
        $query = ($condition === null)
            ? 'SHOW TABLES'
            : 'SHOW TABLES LIKE ' . $this->quote($condition);

        $result = @mysqli_query(self::$connect, $query);

        $return = array();

        while ($row = @mysqli_fetch_row($result)) {
            $return[] = $row[0];
        }

        return $return;
    }

    //--- Perform a query
    public static function realQuery(string $query, bool $log = true)
    {
        $result = @mysqli_query(self::$connect, $query);

        self::$_last_query = $query;

        if (SQL_PROFILING) {
            self::$_query_list[] = $query;
        }

        if (!$result && $log) {
            self::error('query', $query);
        }

        if (is_object($result) && $result instanceof mysqli_result) {
            return new DB_Result($result);
        }

        return $result;
    }

    //--- Perform a query with caching support
    //--- ToDo: memcached & Redis caching support
    public static function query($query, $TTL = null, $cache_id = '', $log = true)
    {
        if (empty(trim($query))) {
            self::error('query', 'Empty query');
            return false;
        }

        $TTL = stripos(trim($query), 'SELECT') === 0 ? $TTL : null;

        if ($TTL && $TTL !== 'nocache') {
            $result = array();
            $cache_file = md5($query);
            $cache_dir = CP_DIR . '/tmp/cache/sql/' . (trim($cache_id) > ''
                    ? trim($cache_id) . '/'
                    : substr($cache_file, 0, 2) . '/' . substr($cache_file, 2, 2) . '/' . substr($cache_file, 4, 2) . '/');

            if (!file_exists($cache_dir) && !mkdir($cache_dir, 0777, true) && !is_dir($cache_dir)) {
                self::error('cache', sprintf('Directory "%s" was not created', $cache_dir));
                return false;
            }

            if (!(file_exists($cache_dir . $cache_file) && ($TTL === -1 ? true : @time() - @filemtime($cache_dir . $cache_file) < $TTL))) {
                $res = self::realQuery($query, $log);
                while ($a = $res->getAssoc()) {
                    $result[] = $a;
                }
                file_put_contents($cache_dir . $cache_file, base64_encode(serialize($result)));
            } else {
                $result = unserialize(base64_decode(file_get_contents($cache_dir . $cache_file)), ['allowed_classes' => false]);
            }

            return new DB_Result($result);
        }

        return self::realQuery($query, $log);
    }

    //--- Converts and escapes data for SQL query
    public function quote($value)
    {
        // escape and add quote just for string value
        if (is_string($value)) {
            return self::escape($value);
        }
        // bool true -> 1
        if ($value === TRUE) {
            return "'1'";
        }
        // bool false -> 0
        if ($value === FALSE) {
            return "'0'";
        }
        // NULL -> 'NULL'
        if ($value === null) {
            return 'NULL';
        }
        // integer
        if (is_int($value)) {
            return (int)$value;
        }
        // float
        if (is_float($value)) {
            return sprintf('%F', $value);
        }
        // array
        if (is_array($value)) {
            $val = array();
            foreach ($value as $key => $val) {
                $val[$key] = self::quote($val);
            }
            return '(' . implode(',', $val) . ')';
        }

        throw new \RuntimeException("Wrong argument type '%type' (expected string) for quote()", array(
            '%type' => gettype($value)
        ));
    }

    //--- Escaping special characters in strings for use in SQL expressions
    public static function escape($value): string
    {
        if (!is_numeric($value)) {
            $value = mysqli_real_escape_string(self::$connect, $value);
        }
        return $value;
    }

    //--- Extended escaping special characters in strings for use in SQL expressions
    public function clear($value)
    {
        $value = htmlspecialchars($value);

        $value = strtr($value, array(
            '{' => '&#123;',
            '}' => '&#125;',
            '$' => '&#36;',
            '&amp;gt;' => '&gt;',
            "'" => "&#39;"
        ));

        if (!is_array($value)) {
            $value = self::$connect->real_escape_string($value);
        } else {
            $value = array_map(array($this, 'escape'), $value);
        }

        return $value;
    }

    //--- Return the number of all records found after the request
    public static function getFoundRows(): int
    {
        $result = self::query('SELECT FOUND_ROWS();');
        $strRow = $result->getArray();
        return (int)$strRow[0];
    }

    //--- Generate statistics of SQL queries
    public static function getStatistics(string $type = '')
    {
        static $result, $list = array(), $time = 0, $count = 0;

        if (!defined('SQL_PROFILING') OR !SQL_PROFILING) {
            return false;
        }

        require_once(CP_DIR . '/system/libraries/SqlFormatter/SqlFormatter.php');

        $result = self::realQuery("SHOW PROFILES", false);

        while (list($qid, $qtime, $qstring) = $result->getArray()) {

            if (is_numeric($qtime)) {
                $time += (float)$qtime;
            }

            $list[$qid]['query'] = SqlFormatter::format($qstring);
            $list[$qid]['time'] = Number::numFormat($qtime * 1, 6, '.', '\'');

            $states = self::realQuery("
						SELECT
							STATE,
							FORMAT(DURATION, 6) AS DURATION
						FROM
							INFORMATION_SCHEMA.PROFILING
						WHERE
							QUERY_ID = " . $qid
                , false);

            $ii = 0;

            while (list($state, $duration) = $states->getArray()) {
                $list[$qid]['states'][$ii]['state'] = $state;
                $list[$qid]['states'][$ii]['time'] = Number::numFormat($duration * 1, 6, '.', '\'');
                $ii++;
            }
        }

        $time = Number::numFormat($time * 1, 6, '.', '\'');
        $count = $result->numRows();

        switch ($type) {
            case 'list':
                return $list;
                break;

            case 'time':
                return $time;
                break;

            case 'count':
                return $count;
                break;
        }

        return false;
    }

    //--- Close MySQL connection.
    private static function close(): void
    {
        if (is_object(self::$connect) && self::$connect instanceof mysqli) {
            @self::$connect->close();
        }
    }

    //--- Error if MySQL is not available
    public static function shutDown(string $error = ''): void
    {
        ob_start();
        header('HTTP/1.1 503 Service Temporarily Unavailable');
        header('Status: 503 Service Temporarily Unavailable');
        header('Retry-After: 120');

        die ($error);
    }

    //--- Error handler
    public static function error(string $type, string $query = ''): ?bool
    {
        if ($type !== 'query') {
            Debug::_echo('Error ' . $type . ' MySQL database.', SQL_ERRORS_STOP);
        } else {
            $_error = @mysqli_error(self::$connect);

            Debug::_errorSql($_error, $query, self::getCaller(), SQL_ERRORS_STOP);

            $log = array(
                'sql_error' => $_error,
                'sql_query' => htmlentities(stripslashes($query), ENT_QUOTES),
                'caller' => self::getCaller(),
                'url' => HOST . $_SERVER['SCRIPT_NAME'] . ((isset($_SERVER['QUERY_STRING']) && $_SERVER['QUERY_STRING'] !== '')
                        ? '?' . $_SERVER['QUERY_STRING']
                        : '')
            );

            //-- ToDo: display SQL debug info
            if (SQL_DEBUGGING) {
                $msg = '';
                echo $msg;
            }

            //-- ToDo: log SQL

            //-- ToDo: send mail if SQL error
            if (SEND_SQL_ERROR) {
                return false;
            }
        }
    }

    //--- Retrieve MySQL server information
    public static function version(): string
    {
        return @mysqli_get_server_info(self::$connect);
    }

    public function __destruct()
    {
        self::close();
    }

    public function __clone()
    {
        //
    }

    public function __wakeup()
    {
        //
    }

}